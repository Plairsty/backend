// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pb/auth.proto

package __auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Unary RPC
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Client streaming RPC
	// Client can register multiple users at once
	RegisterStream(ctx context.Context, opts ...grpc.CallOption) (AuthService_RegisterStreamClient, error)
	// Here client is sending a stream of messages to server
	// Because client can try bunch of Username combinations for availability
	// But right now it's not what we need. Just for future help
	UserNames(ctx context.Context, opts ...grpc.CallOption) (AuthService_UserNamesClient, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	AccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterStream(ctx context.Context, opts ...grpc.CallOption) (AuthService_RegisterStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[0], "/auth.AuthService/RegisterStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceRegisterStreamClient{stream}
	return x, nil
}

type AuthService_RegisterStreamClient interface {
	Send(*RegisterRequest) error
	CloseAndRecv() (*RegisterResponse, error)
	grpc.ClientStream
}

type authServiceRegisterStreamClient struct {
	grpc.ClientStream
}

func (x *authServiceRegisterStreamClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceRegisterStreamClient) CloseAndRecv() (*RegisterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) UserNames(ctx context.Context, opts ...grpc.CallOption) (AuthService_UserNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[1], "/auth.AuthService/UserNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceUserNamesClient{stream}
	return x, nil
}

type AuthService_UserNamesClient interface {
	Send(*CheckUsernameRequest) error
	CloseAndRecv() (*CheckUsernameResponse, error)
	grpc.ClientStream
}

type authServiceUserNamesClient struct {
	grpc.ClientStream
}

func (x *authServiceUserNamesClient) Send(m *CheckUsernameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceUserNamesClient) CloseAndRecv() (*CheckUsernameResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CheckUsernameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Unary RPC
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Client streaming RPC
	// Client can register multiple users at once
	RegisterStream(AuthService_RegisterStreamServer) error
	// Here client is sending a stream of messages to server
	// Because client can try bunch of Username combinations for availability
	// But right now it's not what we need. Just for future help
	UserNames(AuthService_UserNamesServer) error
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	AccessToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) RegisterStream(AuthService_RegisterStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterStream not implemented")
}
func (UnimplementedAuthServiceServer) UserNames(AuthService_UserNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method UserNames not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) AccessToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessToken not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).RegisterStream(&authServiceRegisterStreamServer{stream})
}

type AuthService_RegisterStreamServer interface {
	SendAndClose(*RegisterResponse) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type authServiceRegisterStreamServer struct {
	grpc.ServerStream
}

func (x *authServiceRegisterStreamServer) SendAndClose(m *RegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceRegisterStreamServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthService_UserNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).UserNames(&authServiceUserNamesServer{stream})
}

type AuthService_UserNamesServer interface {
	SendAndClose(*CheckUsernameResponse) error
	Recv() (*CheckUsernameRequest, error)
	grpc.ServerStream
}

type authServiceUserNamesServer struct {
	grpc.ServerStream
}

func (x *authServiceUserNamesServer) SendAndClose(m *CheckUsernameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceUserNamesServer) Recv() (*CheckUsernameRequest, error) {
	m := new(CheckUsernameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AccessToken(ctx, req.(*AccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "AccessToken",
			Handler:    _AuthService_AccessToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterStream",
			Handler:       _AuthService_RegisterStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UserNames",
			Handler:       _AuthService_UserNames_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/auth.proto",
}
